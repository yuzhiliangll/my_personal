回顾:

可靠传输的关键依靠的是什么?

你可以从以下几个关键点来详细解释可靠传输的实现机制，尤其是在TCP协议中的实现：

1. 确认机制（Acknowledgment, ACK）
核心概念：可靠传输的一个关键机制是“确认机制”。发送方在传输数据后，会等待接收方的确认消息（ACK），确认接收到的数据是否完整且无误。
详细说明：每个数据段在传输时都有一个唯一的序列号，接收方在成功接收并校验数据段后，会发送一个确认号，告知发送方已接收的最大序列号以及下一个期望的数据段序列号。这确保了发送方知道数据是否成功传输。
2. 超时重传（Timeout and Retransmission）
核心概念：为了防止数据丢失，可靠传输依赖超时重传机制。
详细说明：发送方在发送数据后启动一个计时器，如果在指定的时间内没有收到接收方的ACK，发送方会假定数据段丢失并重新发送该数据段。这个过程反复进行，直到接收到相应的确认信息。
3. 序列号（Sequence Numbering）
核心概念：序列号用于确保数据按正确顺序到达接收方，并帮助处理数据乱序的问题。
详细说明：传输层将大文件分割为多个数据段，每个段都附有一个序列号。接收方使用这些序列号将数据段按正确顺序组装起来，即使数据段乱序到达，也能正确重组。
4. 窗口控制（Window Control）
核心概念：滑动窗口机制用于控制数据传输的速度和流量，避免网络拥塞。
详细说明：滑动窗口允许发送方在等待ACK的同时继续发送多个数据段，而无需立即停止发送。窗口的大小由接收方根据其接收能力决定，并通过ACK中的窗口字段告知发送方。通过动态调整窗口大小，TCP能够高效利用网络带宽并避免拥塞。
5. 拥塞控制（Congestion Control）
核心概念：拥塞控制机制用于防止网络过载，从而保证可靠传输。
详细说明：TCP通过多种算法（如慢启动、拥塞避免、快速重传和快速恢复）来检测网络的拥塞状态并调整数据发送速率。通过逐步增加发送速率并在检测到拥塞时迅速减少，TCP能够平衡数据传输速度与网络稳定性。
6. 差错检测与纠正（Error Detection and Correction）
核心概念：通过校验和（Checksum）等机制确保数据传输的完整性。
详细说明：在数据传输过程中，数据可能受到各种因素的影响而出错。TCP报文段中包含校验和，接收方通过校验和检查数据是否发生错误，如果发现错误，会丢弃数据并不发送ACK，触发发送方的重传机制。
综合回答：
在面试时，你可以总结为：

“可靠传输的关键在于多层次的机制协同工作。首先是通过序列号和确认机制确保数据的有序和完整传输；其次，超时重传和滑动窗口机制保证了即使在网络不稳定的情况下，数据也能被可靠地传输；拥塞控制和差错检测进一步提高了传输的效率和准确性。
所有这些机制共同作用，使得TCP能够提供端到端的可靠传输服务。”

=================================================================================

关于重发次数
若有个包重传了N次还是失败, 会一直持续重传到成功为止么?

如果一个数据包重传了多次仍然失败，TCP不会无限制地持续重传。
TCP协议设计了一个机制，叫做 重传次数限制和连接超时（TCP Retransmission and Timeout），
以防止网络资源被无限制占用，并避免在网络发生严重问题时导致连接僵死。

1. 重传次数限制
最大重传次数：TCP实现通常会设置一个最大重传次数（例如3次、5次等，具体取决于操作系统的实现）。
当一个数据包在经过一定次数的重传后，仍然未能收到确认（ACK），TCP会认为网络或对方主机出现了问题。
比如有些系统, 重传5次还未成功就会发送reset报文(RST), 断开TCP连接。

指数退避机制：TCP使用一种指数退避的机制来控制重传的时间间隔。每次重传失败后，TCP会将下次重传的时间间隔加倍，直到达到一个上限时间。
这种方法避免了在网络拥堵时频繁重传造成的进一步拥塞。

2. 连接超时（Connection Timeout）
连接中断：如果一个数据包在超过最大重传次数后仍未被确认，TCP会放弃重传，并认为连接失败。
此时，TCP将关闭连接并通知应用层（例如返回错误给应用程序）。

RTO（Retransmission Timeout）：TCP有一个动态计算的重传超时（RTO）值，它基于往返时间（RTT）的估计。
当等待ACK超过RTO时，TCP触发重传。如果连续几次重传都超过RTO，最终会导致连接超时。

3. 结果与处理
网络异常：如果发生了持续无法确认的重传，很可能是网络发生了严重的问题（如路由器故障、网络不通等），或者对方主机出现了问题（如主机宕机）。
连接关闭：一旦超过重传限制，TCP将主动关闭连接。应用层会收到错误信息，提示数据传输失败。此时应用程序可以选择重新建立连接，或者采取其他处理措施（例如通知用户传输失败）。
4. 总结
如果一个数据包重传了N次仍然失败，TCP不会继续无限制地重传。
相反，TCP会在达到最大重传次数后，关闭连接并通知应用层。
这种机制确保了TCP连接在遇到网络或对方主机出现不可恢复的故障时，不会陷入无限重传的循环，而是能够及时释放资源并进行错误处理。

=================================================================================================================================

在TCP协议中，接收窗口大小是用来控制发送方可以发送的、但尚未被确认的数据量。
接收窗口大小由接收方决定，并告知发送方。这种机制允许接收方根据自身的处理能力控制数据流，防止因处理能力不足而导致数据丢失。

1. 接收窗口（Receive Window, RWND）的基本概念
接收窗口大小：
    接收窗口大小（RWND）是接收方在TCP报文中指定的一个值，表示接收方当前能够接收但还未处理的数据字节数。
    这一数值随时可能变化，接收方会通过TCP报文中的“窗口大小”字段不断更新该值。
发送方行为：
    发送方根据接收到的RWND来决定可以继续发送的数据量。发送方不会发送超过接收窗口大小的数据，以确保接收方有足够的缓冲区来处理数据。

2. 不足接收窗口大小的处理
    当发送方在发送数据时，发现可发送的数据量小于接收窗口大小时，具体处理方式如下：

    1. 按可用窗口发送数据
        逐步发送：发送方会尽量利用接收窗口允许的最大空间进行数据发送。如果接收窗口较小，发送方会按照窗口大小发送较小的数据量，等待接收方处理并返回ACK后再发送更多数据。
        窗口探测：当接收窗口变得很小时，发送方可能会发送“窗口探测”数据包（通常是一个小的数据包），以确认接收方是否已释放缓冲区空间，允许更多数据的传输。
    2. 窗口关闭的处理
        零窗口（Zero Window）情况：如果接收窗口大小降为0（表示接收方暂时无法接收更多数据），发送方会暂停发送，并开始定期发送窗口探测数据包。
        探测数据包的作用是询问接收方是否有能力再次接收数据。
        窗口恢复：当接收方的缓冲区释放了足够的空间后，接收窗口大小会再次增加，接收方会通过ACK更新发送方的窗口信息。发送方在收到这个更新后，立即恢复数据传输。
    3. 流量控制
        滑动窗口机制：TCP协议通过滑动窗口机制管理数据的发送和确认。接收窗口的大小决定了发送方滑动窗口的上限。滑动窗口的调整使得发送方能够灵活应对网络状况和接收方的处理能力。
        避免网络拥塞：通过动态调整发送的数据量，TCP能够避免在接收方无法及时处理数据时造成网络拥塞，确保数据传输的平稳性和可靠性。
    3. 发送方的策略
        等待ACK：当发送方已发送的数据量达到接收窗口的上限时，它必须等待接收方的ACK来确认已接收的数据，并释放窗口空间，以便发送方继续发送新的数据。
        动态调整：TCP发送方会根据接收到的ACK中包含的接收窗口信息，动态调整后续的数据发送量。这样的调整保证了数据传输既不会导致接收方过载，也不会浪费网络资源。


如果接收窗口最多能接收4个包
但发送方只发了2个包
接收方如何确定后面还有没有2个包?
等待一定时间后没有第三个包
就会返回确认收到2个包给发送方
-------
-------超时机制：
        接收方通常会设置一个超时时间。如果在这个时间内没有收到期望的下一个数据包（如序列号为3的包），接收方会认为可能没有更多的数据包要发送。
        超时后，接收方会发送一个确认包（ACK）给发送方，确认已接收到的所有包。
        例如，确认包中可能会包含“我已经收到序列号为2的包，你可以继续发送下一个包或结束传输”。



4. 总结
当发送方发现可用的数据量小于接收窗口大小时，它会按窗口大小进行数据发送。
如果窗口关闭或变小，发送方会暂停发送并进行窗口探测。整个过程由TCP的流量控制机制管理，以确保在不同网络条件下的平稳和可靠数据传输。

============================================================================

为什么选择在传输层就将数据 "大卸八块" 分成多个段, 而不是等到网络层再分片传递给数据链路层?

在传输层将数据分成多个段（Segmentation）而不是在网络层再进行分片（Fragmentation），主要是出于以下几个原因：

1. 传输层的可靠性和流量控制
可靠性：
传输层协议（如TCP）提供了可靠的数据传输服务，包括错误检测、重传机制和序列控制等功能。
将数据分成多个段后，传输层可以为每个段提供单独的确认和重传机制，这使得传输更加可靠。
如果某个段丢失或损坏，传输层可以只重传这个段，而不必重传整个数据包。
流量控制：
传输层通过分段可以更好地进行流量控制，避免发送过大数据包导致网络拥塞。
TCP 使用窗口机制（如滑动窗口）来控制发送的数据量，使得发送方和接收方之间的传输速率能够动态调整。

2. 网络层的职责与复杂性
网络层的职责：
网络层的主要职责是路径选择（路由）和数据包的转发，而不是处理传输层的可靠性和顺序问题。
如果网络层来负责分片，传输层在接收数据时需要重新排序、重组和处理潜在的丢包情况，这会增加网络层和传输层之间的复杂性。

分片的代价：
在网络层进行分片会导致网络层和数据链路层负担更重，因为分片后的每一小块数据都需要重新封装和处理。
而且，当分片后的某一部分丢失时，整个数据包可能都需要重新传输，增加了网络的负担。

3. 跨网络传输的效率
路径一致性：
在传输层分段之后，整个段会被统一处理和传输，确保数据包在不同的网络之间的路径一致性。
网络层的分片则可能因为路径变化导致不同的片段走不同的路由，增加了重新组装的复杂性和潜在的丢包风险。

减少MTU问题：
网络层的分片通常是由路径中最小的最大传输单元（MTU）决定的。
当不同网络的MTU值不同，网络层需要对数据包进行多次分片和重新组装，增加了延迟和复杂性。而在传输层直接分段，可以避免网络层的多次分片操作，提高传输效率。

4. 应用层的灵活性
数据量与传输优化：应用层的数据量通常较大且不确定，通过在传输层进行分段，可以根据网络的情况灵活调整每个段的大小。
这样即使应用层生成了一个大数据块，传输层也能以适当的段大小发送数据，确保传输的效率和可靠性。

总结:
    在传输层就分片---因为可以提高重传的性能
    需要明确的是: 可靠传输是在传输层进行控制的
    如果在传输层不分段, 一旦出现数据丢失, 整个传输层的数据都得重传
    如果在传输层分了段, 一旦出现数据丢失, 只需要重传丢失的那些段即可

==========================================================================================




