TCP CUBIC 和 TCP BBR 是现代 TCP 拥塞控制算法的两种，
它们在不同的网络环境中针对不同的需求进行了优化，并且在当今的互联网传输中得到了广泛应用。
以下是对这两种算法的详细解释：

TCP CUBIC
简介：

TCP CUBIC 是 Linux 系统中广泛采用的默认 TCP 拥塞控制算法，由韩国科学技术院（KAIST）和三星电子公司开发，首次提出于 2005 年。它是 TCP Reno 和 TCP BIC 的改进版本，旨在提高高带宽-高时延（"long fat network"）网络中的性能。
工作原理：

TCP CUBIC 的主要特点是使用三次方的增长函数来调节拥塞窗口（cwnd）。
在不发生拥塞的情况下，cwnd 随着时间的立方曲线缓慢增长，直到达到之前丢包时的窗口大小（复原点），然后增速加快。
当拥塞窗口接近复原点时，增长速度会减慢，以避免引起网络拥塞；一旦超过复原点，窗口会更快地增长，充分利用可用的带宽。
优点：

针对高带宽-高时延网络优化：CUBIC 的三次方增长函数使得它在高带宽-高时延网络中可以更好地利用带宽，
而不会像 TCP Reno 那样因为丢包而频繁回退。

公平性和稳定性：由于其增长方式，CUBIC 可以更公平地与其他 TCP 流量共享带宽，并且在大多数情况下表现出更高的稳定性。

快速收敛：CUBIC 在高丢包率或高延迟的网络中，可以快速恢复并趋向稳定，使得整体吞吐量更高。

缺点：

复杂性：由于其非线性的增长曲线，CUBIC 的行为在某些极端情况下可能比较复杂，
并且在低带宽-低时延网络中可能不如简单的算法（如 TCP Reno）那样高效。



TCP BBR (Bottleneck Bandwidth and Round-trip propagation time)
简介：

TCP BBR 是 Google 开发的一种拥塞控制算法，首次提出于 2016 年。
与传统的基于丢包的算法不同，BBR 通过估计瓶颈带宽和往返时间（RTT）来控制发送速率。
工作原理：

BBR 通过周期性地测量网络的瓶颈带宽和最小往返时间来动态调整发送速率。它试图在网络的带宽和 RTT 之间找到一个平衡点，使得数据传输在不引发拥塞的情况下达到最大吞吐量。
在初始阶段，BBR 会快速探测网络的瓶颈带宽，并根据测量结果调整发送速率，而不是依赖丢包信号来减少速率。
优点：

高效率的带宽利用：BBR 能够精确估计瓶颈带宽，确保发送速率接近网络的最大承载能力，减少了传统基于丢包算法中的“带宽-延迟乘积”的问题。

低延迟：由于 BBR 并不依赖丢包来检测拥塞，它通常可以维持较低的队列延迟，减少了数据在网络中堆积的可能性。

稳健性：BBR 在面对不同网络条件时表现出较高的稳健性，能够适应从低带宽-低时延到高带宽-高时延的多种网络环境。

缺点：

公平性问题：BBR 在某些情况下可能会占用比其他 TCP 算法（如 CUBIC）更多的带宽，导致不公平的带宽分配。
兼容性问题：由于其独特的算法设计，BBR 与基于丢包的算法可能不兼容，这在某些混合流量环境中可能引发问题。
总结
TCP CUBIC 是一个适合高带宽-高时延网络的成熟算法，具有较高的稳定性和公平性，在现代互联网传输中广泛使用。

TCP BBR 是一种创新的算法，通过带宽和RTT的测量来动态调整传输速率，特别适用于需要高效利用带宽和低延迟的应用场景。

两者各有优势，CUBIC 强调的是通过非线性的窗口增长来避免拥塞，而 BBR 则侧重于通过测量带宽和延迟来动态调整发送速率，以达到更优的网络性能。



