如果接收方的缓存区满了, 发送方还在疯狂的发送数据 会发生什么情况?
接收方只能把收到的数据包丢掉, 大量的丢包会极大着浪费网络资源
所以要进行流量控制

什么是流量控制?
让发送方的发送速率不要太快, 让接收方来得及接受处理

原理:
通过确认报文中窗口字段来控制发送方的发送速率
发送方的发送窗口大小不能超过接收方给出窗口大小
当发送方收到接收窗口的大小为 0 时, 发送方就会停止发送数据


接收窗口大小 和 缓存区大小有关

具体来说，接收窗口的大小通常由接收方的缓存区大小决定，因为缓存区用于存储接收到但尚未处理的数据。

详细解释：
    接收窗口的作用：
        定义：接收窗口是接收方用来告诉发送方自己当前可以接收的数据量的大小。
             它表示在接收方的缓存区中还有多少空间可以用来存放新接收的数据。
        流量控制：接收窗口的大小直接影响到流量控制。
                接收方通过接收窗口大小来限制发送方发送的数据量，
                以避免发送的数据超过接收方的处理能力和缓存能力。

        缓存区的作用：

            存储数据：
            当接收方接收到数据包后，数据会先存储在缓存区中，等待上层应用程序来读取和处理。
            如果应用程序处理数据的速度较慢，数据会在缓存区中积累。
            决定窗口大小：
            缓存区的总大小限制了接收窗口的最大值。
            如果缓存区空间不够，接收窗口就会缩小，向发送方表明接收方当前能接收的数据量有限，以免接收方发送过多数据导致缓存区溢出。

    动态调整：

        窗口大小调整：
        在传输过程中，接收窗口大小是动态变化的。
        当缓存区中的数据被应用程序处理并释放空间时，接收方可以增大接收窗口的大小，告诉发送方可以发送更多的数据。
        窗口缩小：
        反之，如果接收方的缓存区接近满载，接收方会缩小接收窗口的大小，
        甚至在极端情况下将窗口大小设置为0，这表明接收方暂时无法接收更多的数据。

    TCP中的窗口机制：

    TCP滑动窗口：
        在TCP协议中，滑动窗口机制利用接收窗口大小来实现流量控制。
        接收方的窗口大小信息会通过TCP报文头中的“窗口大小”字段传递给发送方。发送方据此决定下一次发送的数据量，以确保不超过接收方的处理能力。
        拥塞控制：
        除了接收方的缓存区，网络中潜在的拥塞情况也会影响发送方的发送窗口大小。
        TCP结合接收窗口和拥塞窗口（由网络状况决定）来控制传输的速度和数据量。
总结：
接收窗口大小与接收方的缓存区大小直接相关，缓存区的大小决定了接收方在任何时间点上能够接收的数据量。
如果缓存区空间不足，接收窗口会相应缩小，以防止数据溢出并导致丢包和数据传输失败。
这种机制确保了数据传输的可靠性和效率，同时避免了网络和接收方的过载。
==============================================================================

窗口大小是动态变化的, 主要受到以下几个因素的影响：

1. 接收方缓存区的可用空间
缓存区使用情况：
接收方的窗口大小直接与其缓存区的可用空间相关。
当接收方的应用程序读取并处理缓存区中的数据后，腾出的空间可以用于接收更多数据，从而增大窗口大小。
反之，如果缓存区中的数据积压，窗口大小会减小，以防止新的数据涌入导致缓存区溢出。

2. 网络拥塞情况
拥塞窗口（Congestion Window, CWND）：
在TCP协议中，除了接收窗口外，还有一个由发送方维护的拥塞窗口。
拥塞窗口大小反映了网络的拥塞状况。
网络中发生拥塞时，拥塞窗口会缩小，限制发送方的数据发送速率，以避免进一步加剧网络拥塞。
慢启动和拥塞避免：
TCP协议通过慢启动和拥塞避免算法逐步调整拥塞窗口的大小。
网络环境好时，拥塞窗口逐步增大；发生拥塞时，拥塞窗口会迅速减小。

3. 流量控制
窗口缩放：
TCP协议允许接收方动态调整窗口大小，以适应不同网络环境中的带宽延迟产品（Bandwidth-Delay Product, BDP）。
窗口缩放选项允许接收窗口大小超过常规的最大值（64 KB），以支持高带宽、长延迟的网络。
接收方反馈：
接收方通过TCP报文中的“窗口大小”字段实时向发送方通告当前的接收窗口大小。
发送方根据这个信息调整数据发送的节奏，确保不会发送超过接收方能处理的数据量。

4. 发送方的数据传输策略
数据包发送策略：
发送方在发送数据时，会根据接收窗口大小和拥塞窗口的最小值来决定发送数据的速率和数量。
如果接收窗口较小，发送方会减缓数据发送速度，甚至可能暂时停止发送。
重传机制：
如果发送方没有及时收到ACK确认，可能会认为发生了丢包，
此时会减小拥塞窗口，甚至触发超时重传，进一步影响窗口的动态调整。

5. 应用程序的处理速度
应用层的影响：
接收方的应用程序处理数据的速度直接影响缓存区的可用空间。
如果应用程序处理速度较快，数据可以迅速从缓存区中取出，腾出空间，窗口大小就会增加。相反，如果应用程序处理较慢，缓存区积压的数据会增加，窗口大小会减小。

6. 延迟和抖动
网络延迟：
高延迟环境下，接收方可能需要更大的窗口来维持高效传输。
延迟影响发送方ACK的接收时间，从而影响发送方对窗口大小的调整。
网络抖动：
网络抖动（延迟变化）会影响ACK的返回时间，使得发送方对网络状况的判断变得不稳定，从而影响窗口的动态调整。

7. ACK的丢失或延迟
ACK丢失：
如果接收方发送的ACK丢失，发送方可能误以为发生了网络拥塞或数据丢失，从而减小拥塞窗口。虽然接收窗口大小本身没有改变，但发送方因未收到ACK而调整了数据发送策略，间接影响了数据传输的效率。
延迟ACK：
TCP协议中，接收方可能会延迟发送ACK以减少ACK包的数量（延迟ACK）。
这会暂时影响发送方对窗口大小的调整，因为发送方可能会等待ACK再继续发送更多数据。



总结
窗口大小的动态变化是一个复杂的过程，由多种因素共同作用，包括接收方的缓存区空间、网络拥塞情况、发送方的数据策略、应用程序的处理速度、以及网络的延迟和抖动等。
这些因素共同确保数据传输的效率和可靠性，同时避免网络和接收方的过载。
==================================================================================================

TCP -- 流量控制 -- 特殊情况
有一种特殊情况
一开始, 接收方给发送方发送了 0 窗口的报文段
后面, 接收方又有了一些存储空间, 给发送方发送的非0窗口的报文段丢失了
发送方的发送窗口一直为零, 双方陷入僵局

解决方案:
当发送方收到0窗口通知时,这时发送方停止发送报文
并且同时开启一个定时器, 隔一段时间就发个测试报文 主动去询问接收方最新的窗口大小
如果接收的窗口大小还是为0, 则发送方再次刷新启动定时器




