序号 (Sequence Number)
占4 字节即32位
首先, 传输过程的每一个字节都会有一个编号
然后, 序号是按照字节编号来计算的, 而不是按照数据包编号来计算的
序号从0开始, 最大值为2^32 - 1
序号是循环的, 当序号达到最大值时, 会从0开始重新计数
序号用于标识数据包的顺序, 接收方可以根据序号来重组数据包

在建立连接后, 序号代表: 这一次传给对方的TCP数据部分的第一个字节的编号

发送方在发送数据时，会给第一个字节指定一个初始序号（Initial Sequence Number, ISN），后续的字节序号是基于这个初始序号加上相应的偏移量计算的。
例如，如果初始序号是1000，那么第一个字节的序号就是1000，第二个字节的序号是1001，以此类推。当接收方收到数据包后，会通过序号来确认哪些字节已经收到，从而实现数据的有序传输和可靠传输。
序号还可以用于确认数据包是否正确接收, 如果接收方收到一个数据包, 但是序号不正确, 就会发送一个重传请求给发送方

============================================================================================================================================

初始序号（Initial Sequence Number, ISN）
1. 随机生成：
历史原因：在早期的TCP实现中，ISN是一个简单的固定增量计数器。这样做的缺点是容易被预测，导致潜在的安全风险（如TCP序号猜测攻击）。
现代实现：为了增强安全性，现代的TCP实现通常会使用一个随机或伪随机算法来生成ISN。这使得序号更加难以预测，从而降低了TCP攻击的可能性。
2. 与时间相关：
TCP窗口：TCP连接可能会有一个较大的数据窗口（如64KB或更大），因此，ISN不能完全随机生成，否则可能导致数据包的序号重叠。因此，通常会结合系统的时钟值来生成ISN。
典型实现：在很多系统中，ISN是基于一个时间戳生成的（例如，自系统启动以来经过的时间），并且随着时间的推移以一个小的步长不断递增。这种方法确保每次连接的ISN不同，同时也确保不同连接之间的ISN之间有足够的距离以避免冲突。
3. 与源IP地址和端口相关：
特定连接的ISN生成：一些实现可能还会将源IP地址、目标IP地址、源端口和目标端口等连接相关的信息作为输入，结合时间戳生成ISN。这使得同一对主机之间的不同连接有不同的ISN，从而减少序号冲突的可能性。
4. 操作系统和协议栈的实现：
不同的操作系统和协议栈可能使用不同的算法来生成ISN。现代操作系统通常采用基于加密的伪随机数生成器（CSPRNG）或其他复杂的算法，以保证安全性。
实际使用场景
在建立TCP连接时，三次握手中的第一个数据包中（SYN包）包含了ISN。对方接收到这个SYN包后，会在ACK包中将ISN加1来确认接收，并建立连接。这个过程确保了数据包序列的一致性和连接的可靠性。

====================================================================================================================================================

确认号（Acknowledgment Number, ACK） 是TCP协议中用于实现可靠数据传输的关键机制之一。
它用于接收方告知发送方已经成功接收到的数据字节的序号，从而保证数据的有序性和完整性。以下是对确认号的详细解析：

占 4 字节即32位
在建立连接后, 确认号代表: 期望对方下一次传过来的TCP数据部分的第一个字节的编号

1. 确认号的定义
确认号是一个32位的数字，出现在TCP报文段的头部，用于确认从对方接收到的字节序列。
确认号表示的是下一个期望接收的字节序号。换句话说，确认号表示接收方已经成功接收到的最后一个字节序号加1。
2. 确认号的计算
当接收方收到一个数据段时，它会读取数据段的序号和数据的长度，从而计算出下一个期望的字节序号。
确认号通常是接收方发送给发送方的ACK（确认）报文中的一个字段。这个字段告诉发送方，接收方已经成功接收到并处理了从初始序号到确认号-1的所有字节。
3. 三次握手中的确认号
第一次握手：客户端发送一个SYN包，其中包含一个初始序号（ISN）。
第二次握手：服务器收到SYN包后，发送一个SYN-ACK包，ACK字段的值为客户端的ISN加1，表示服务器已经成功接收到客户端的SYN包，并且期望收到客户端的下一个字节。
第三次握手：客户端收到SYN-ACK包后，再次发送一个ACK包，确认服务器的ISN加1。
4. 数据传输中的确认号
在数据传输过程中，每当接收方接收到一个数据段后，它会计算并发送确认号。例如：
假设发送方发送了100字节的数据，序号为1000-1099。接收方收到这个数据段后，确认号将为1100，表示已经成功接收到序号为1000到1099的字节，期望下一个字节的序号是1100。
确认号的不断更新确保了发送方知道哪些数据已经被成功接收，哪些数据可能需要重传。
5. 累积确认
TCP使用累积确认的方式，即确认号只会确认连续收到的字节数据。
如果接收方连续接收到多个数据段，确认号将会更新为最后一个连续接收到的字节序号加1。
示例：如果接收方收到的数据段为1000-1099和1100-1199，则确认号会更新为1200。但如果中间的数据段丢失，确认号将停留在丢失的数据段之前的位置，等待重传。
6. 选择性确认（Selective Acknowledgment, SACK）
累积确认有一个局限性，就是它无法处理丢失的数据段。当数据段丢失时，发送方可能会重传大量已经成功接收到的数据段。
为了解决这个问题，TCP引入了选择性确认（SACK）机制，允许接收方确认已经成功接收的非连续数据段。
通过SACK，接收方可以通知发送方哪些具体的数据段已经接收，哪些仍然缺失，从而减少不必要的重传，提高网络效率。
7. 延迟确认
为了减少网络负担，接收方可能不会立即发送确认，而是会延迟一段时间（通常是几十毫秒），以便可以在一个确认包中确认多个数据段。
这种机制被称为延迟确认（Delayed Acknowledgment），它有助于提高网络效率，但也可能增加一些延迟。
8. 确认号的安全性
确认号的安全性对于TCP连接非常重要，因为恶意的第三方可能试图伪造确认号进行攻击。
现代TCP实现中，确认号通常与初始序号一样，通过随机化或伪随机算法生成，以增强安全性，防止序号猜测攻击。
总结
确认号在TCP协议中起着至关重要的作用，确保了数据的有序传输和完整性。通过累积确认和选择性确认等机制，TCP能够高效地管理数据的传输和丢失情况，从而实现可靠的网络通信。

===============================================================================================================================================================









