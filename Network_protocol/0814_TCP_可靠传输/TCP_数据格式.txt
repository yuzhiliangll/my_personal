TCP（传输控制协议）数据格式的线段图包括了TCP报文段的结构，
其中主要有以下几个字段：

源端口（Source Port）: 16位，用于标识发送方的端口号。
目的端口（Destination Port）: 16位，用于标识接收方的端口号。
序列号（Sequence Number）: 32位，用于标识数据的顺序。
确认号（Acknowledgment Number）: 32位，用于确认收到的数据的序列号。
数据偏移（Data Offset）: 4位，表示TCP头部的长度（以32位字为单位）。
保留（Reserved）: 6位，保留为将来使用，通常设置为0。
控制位（Flags）: 6位，包括：
                        URG（紧急指针有效）
                        ACK（确认号有效）
                        PSH（推送功能）
                        RST（重置连接）
                        SYN（同步序列号）
                        FIN（结束标志）

窗口大小（Window Size）: 16位，用于流量控制，表示接收方的缓冲区大小。
校验和（Checksum）: 16位，用于检测数据传输过程中是否出现错误。
紧急指针（Urgent Pointer）: 16位，指示紧急数据的偏移量。
选项（Options）: 可变长度，用于扩展TCP功能，如最大报文段长度（MSS）、时间戳等。
填充（Padding）: 确保TCP头部的长度是32位的倍数。
数据（Data）: TCP数据负载的实际内容。


  0      7 8     15 16    31
 +--------+--------+--------+--------+
 |  Source Port (16 bits)            |
 +--------+--------+--------+--------+
 |  Destination Port (16 bits)       |
 +--------+--------+--------+--------+
 |  Sequence Number (32 bits)        |
 +--------+--------+--------+--------+
 |  Acknowledgment Number (32 bits)  |
 +--------+--------+--------+--------+
 | Data  |Rese- |C|C|C|C|C|C|Window  |
 | Offset|rved  |   | | | | | Size   |
 | (4 bits)| (6 bits) | Flags (6 bits)   | (16 bits) |
 +--------+--------+--------+--------+
 |  Checksum (16 bits)               |
 +--------+--------+--------+--------+
 | Urgent Pointer (16 bits)           |
 +--------+--------+--------+--------+
 |  Options (variable length)         |
 +--------+--------+--------+--------+
 |  Padding (if any)                 |
 +--------+--------+--------+--------+
 |  Data (variable length)           |
 +--------+--------+--------+--------+

===============================================================================================

TCP的要点
1. TCP是面向连接的协议，需要三次握手建立连接，四次挥手断开连接。
2. TCP使用序列号和确认号来保证数据的可靠传输。
3. TCP使用滑动窗口机制来控制数据的发送和接收速率。
4. TCP使用校验和来检测数据传输过程中的错误。
5. TCP使用紧急指针来处理紧急数据。
===============================================================================================

TCP的几个要点------------正是因为下面这三点 使得首部比较复杂

可靠传输

TCP的可靠传输主要通过以下机制实现：

序列号和确认号：
每个TCP数据段都包含一个序列号，接收方使用确认号（ACK）来确认成功接收到的数据。
如果发送方没有收到确认，则会重新发送数据，直到确认收到为止。

重传机制：
当发送的数据包在预定时间内没有得到确认，TCP会重新发送这些数据包。
这是通过定时器实现的，通常使用超时重传（Timeout Retransmission）和快速重传（Fast Retransmit）机制。

数据校验：
每个TCP数据包都包含一个校验和字段，用于验证数据在传输过程中是否发生了错误。
如果校验和检测到错误，数据包会被丢弃，发送方会重新发送。

数据排序：
TCP保证数据按顺序到达目的地。
接收方根据序列号对数据进行排序，即使数据包到达顺序与发送顺序不同。
========================================================================================================

流量控制
TCP的流量控制机制通过“滑动窗口”来实现，主要包括：

滑动窗口：
接收方通过“窗口大小”字段告诉发送方它的缓冲区有多大，防止发送方发送过多的数据。
发送方根据接收方的窗口大小来调整发送速度，避免数据丢失或拥塞。

接收窗口：
在每个ACK响应中，接收方会报告当前窗口大小，
这使得发送方能够动态调整发送的数据量，以适应接收方的处理能力。

===============================================================================================

拥塞控制
TCP的拥塞控制机制用于避免过多的数据进入网络，从而引发拥塞，主要包括以下几个算法：

慢启动（Slow Start）：

TCP连接开始时，使用慢启动算法逐步增加数据发送量。
发送窗口的大小从一个最大报文段长度（MSS）开始，并以指数级增长，直到达到拥塞窗口的阈值（ssthresh）。
拥塞避免（Congestion Avoidance）：

一旦达到阈值，TCP进入拥塞避免阶段。
此阶段，发送窗口的增长速度减慢，从指数级增长变为线性增长。

快速重传（Fast Retransmit）：

如果发送方在收到三个重复的ACK后（表明某些数据包丢失），会立即重传丢失的数据包，而不是等待重传超时。

快速恢复（Fast Recovery）：

在快速重传后，TCP使用快速恢复算法来恢复传输。
它将拥塞窗口设置为发生丢失时的一半，并通过增加窗口大小来恢复传输，直到达到新阈值。

拥塞窗口（Congestion Window, cwnd）：

这是TCP发送方用于控制数据流量的窗口，依据网络的拥塞状态进行调整。
窗口大小的调整依据网络拥塞状况和丢包情况进行动态变化。
这些机制和算法共同作用，确保TCP能够有效地进行数据传输，同时避免网络拥塞，提高网络的整体性能和可靠性。

==========================================================================================================




