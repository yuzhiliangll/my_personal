在我们现实生活中也是一样，买馒头和自己蒸馒头、
去饭店点一份大盘鸡和自己养鸡，杀鸡，做大盘鸡，这是全然不同的两种体验：

自己做麻烦，而且有失败的风险，需要自己承担后果。
买现成的，可以忽略制作细节，方便快捷并且无风险，得到的肯定是美味的食物。
对于后者，就相当于是一个加工厂，通过这个工厂我们就可以得到想要的东西，在程序设计中，这种模式就叫做工厂模式，
工厂生成出的产品就是某个类的实例，也就是对象。
==================================================================================================

关于工厂模式一共有三种，分别是：简单工厂模式、工厂模式、抽象工厂模式。

通过上面人造恶魔果实的例子，我们能够了解到，不论使用哪种工厂模式其主要目的都是实现类与类之间的解耦合，
这样我们在创建对象的时候就变成了拿来主义，使程序更加便于维护。在本节中，先介绍简单工厂模式。

基于简单工厂模式去创建对象的时候，需要提供一个工厂类，专门用于生产需要的对象，这样关于对象的创建操作就被剥离出去了。

简单工厂模式相关类的创建和使用步骤如下：

创建一个新的类, 可以将这个类称之为工厂类。对于简单工厂模式来说，需要的工厂类只有一个。
在这个工厂类中添加一个公共的成员函数，通过这个函数来创建我们需要的对象，关于这个函数一般将其称之为工厂函数。
关于使用，首先创建一个工厂类对象，然后通过这个对象调用工厂函数，这样就可以生产出一个指定类型的实例对象了。

=======================================================================================================

只要工厂类没有问题, 工厂所创建的对象也没有问题
它是可以生产出很多种对象的,
这就需要多种对象存在兄弟关系, 也就是同时继承 同一个父类
利用虚函数、多态

工厂模式--> 简单工厂模式 --》工厂类为一个
工厂模式--> 工厂模式     --》工厂类为多个
工厂模式--> 抽象工厂模式 --》工厂类为N多个

工厂模式（Factory Pattern）是一种创建型设计模式，提供了创建对象的接口，而不是直接实例化对象。
下面是一个基本的工厂模式的 UML 类图描述

          +--------------------+
          |   Product (接口/抽象类) |
          +--------------------+
          | + operation()       |
          +--------------------+
                    ^
                    |
      +----------------------+
      |      ConcreteProductA  |
      +----------------------+
      | + operation()          |
      +----------------------+
                    ^
                    |
      +----------------------+
      |      ConcreteProductB  |
      +----------------------+
      | + operation()          |
      +----------------------+
                    ^
                    |
          +-----------------------+
          |     Factory (工厂类)      |
          +-----------------------+
          | + createProduct(type): Product |
          +-----------------------+

主要组成部分：
    Product（抽象产品类）：

        定义了工厂方法所创建对象的接口或抽象类。所有的具体产品都必须实现这个接口。
    ConcreteProductA 和 ConcreteProductB（具体产品类）：

        具体的产品类，实现了 Product 接口。每个具体产品对应工厂可以创建的不同类型的产品。
    Factory（工厂类）：

        工厂类包含一个 createProduct() 方法，该方法根据传递的参数（如类型或标识符）决定创建哪个具体产品类的实例。返回的类型是 Product，这样客户端代码可以通过工厂获取具体产品的实例，而无需了解产品的具体类。

工厂模式的工作流程：
    客户端通过调用 Factory 类的 createProduct(type) 方法请求创建产品对象。
    工厂根据传递的类型参数 type，决定创建并返回哪种具体产品类的实例。
    客户端代码获得 Product 对象并调用其方法，具体的实现是由具体产品类提供的。


